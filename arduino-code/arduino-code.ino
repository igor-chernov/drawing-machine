#include <avr/pgmspace.h>
#include <Servo.h>

const uint8_t arr[] ={
0, 0, 96, 0, 224, 1, 0, 124, 0, 0, 224, 7, 12, 0, 240, 7, 48, 0, 0, 254, 0, 24, 0, 192, 204, 3, 128, 1, 0, 48, 230, 0, 128, 3, 0, 128, 51, 30, 0, 96, 0, 0, 128, 7, 62, 0, 128, 3, 0, 0, 224, 128, 15, 0, 192, 1, 0, 0, 128, 3, 126, 0, 0, 60, 0, 0, 0, 128, 3, 63, 0, 0, 120, 0, 0, 120, 0, 56, 144, 7, 0, 0, 30, 0, 0, 255, 1, 112, 0, 15, 112, 0, 248, 0, 0, 240, 127, 0, 28, 128, 7, 254, 0, 120, 0, 0, 240, 131, 3, 224, 1, 60, 240, 31, 192, 15, 4, 30, 124, 128, 1, 224, 1, 56, 224, 123, 192, 31, 112, 248, 240, 0, 56, 3, 190, 0, 7, 124, 60, 252, 7, 124, 252, 240, 0, 112, 14, 252, 2, 28, 224, 227, 255, 127, 192, 207, 31, 15, 0, 28, 3, 190, 0, 30, 240, 225, 255, 127, 192, 223, 63, 30, 0, 240, 112, 176, 15, 224, 0, 254, 255, 255, 7, 240, 119, 158, 175, 0, 248, 240, 48, 27, 192, 0, 248, 255, 255, 15, 128, 191, 241, 248, 63, 128, 15, 30, 70, 15, 24, 0, 240, 255, 0, 0, 128, 249, 224, 248, 255, 128, 31, 240, 31, 252, 120, 0, 0, 0, 0, 0, 0, 24, 31, 28, 15, 62, 240, 15, 248, 15, 252, 127, 0, 0, 0, 0, 0, 0, 32, 56, 112, 60, 240, 129, 63, 0, 255, 192, 255, 3, 0, 0, 0, 0, 0, 0, 0, 28, 56, 30, 248, 1, 62, 0, 252, 1, 255, 7, 0, 0, 128, 63, 0, 0, 0, 192, 128, 227, 0, 31, 0, 128, 3, 63, 128, 255, 1, 0, 0, 224, 127, 0, 0, 0, 192, 129, 195, 1, 62, 0, 0, 62, 240, 0, 248, 7, 0, 0, 0, 254, 15, 0, 0, 0, 48, 224, 56, 192, 7, 0, 0, 127, 96, 0, 128, 0, 0, 0, 0, 252, 123, 0, 0, 0, 128, 1, 199, 1, 62, 0, 0, 240, 15, 0, 0, 0, 0, 0, 0, 0, 31, 56, 0, 0, 0, 192, 129, 227, 0, 223, 63, 0, 224, 63, 0, 0, 0, 0, 0, 0, 0, 240, 128, 3, 0, 0, 0, 24, 56, 12, 224, 255, 63, 0, 112, 15, 0, 0, 0, 0, 0, 0, 0, 240, 128, 3, 0, 0, 0, 48, 96, 0, 192, 243, 199, 3, 128, 227, 0, 0, 0, 0, 0, 0, 0, 0, 60, 240, 0, 0, 0, 0, 12, 16, 0, 240, 248, 195, 3, 128, 195, 1, 0, 0, 0, 16, 0, 0, 0, 224, 225, 3, 0, 0, 0, 96, 0, 0, 128, 7, 0, 120, 0, 112, 112, 0, 60, 0, 32, 6, 0, 0, 0, 240, 240, 3, 0, 0, 0, 96, 0, 0, 192, 3, 0, 240, 1, 248, 129, 3, 240, 3, 140, 57, 96, 0, 0, 0, 142, 63, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 124, 0, 252, 192, 1, 248, 3, 206, 28, 112, 0, 0, 0, 252, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 3, 128, 15, 24, 128, 127, 224, 157, 1, 7, 7, 0, 0, 254, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 3, 0, 31, 48, 0, 255, 193, 55, 7, 14, 15, 0, 0, 248, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 126, 0, 192, 15, 8, 192, 255, 240, 189, 129, 135, 7, 0, 0, 255, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 1, 0, 252, 0, 0, 198, 135, 239, 15, 56, 60, 12, 0, 224, 63, 0, 0, 0, 0, 0, 0, 128, 1, 0, 0, 0, 0, 124, 0, 0, 240, 1, 0, 134, 143, 221, 31, 56, 60, 63, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 255, 7, 0, 0, 60, 0, 192, 224, 177, 251, 3, 207, 247, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 192, 255, 31, 0, 0, 240, 0, 0, 131, 135, 254, 14, 184, 159, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 3, 0, 0, 0, 254, 255, 14, 0, 0, 120, 0, 0, 128, 3, 127, 7, 252, 15, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 7, 0, 0, 0, 248, 225, 243, 0, 0, 0, 3, 0, 0, 120, 224, 247, 220, 255, 240, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 1, 0, 0, 0, 0, 248, 241, 0, 0, 0, 6, 0, 0, 248, 192, 238, 159, 199, 241, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 128, 31, 30, 0, 0, 0, 0, 0, 0, 63, 176, 251, 231, 120, 28, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 63, 120, 0, 0, 0, 0, 0, 0, 252, 128, 205, 31, 192, 241, 240, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 1, 0, 0, 0, 0, 192, 7, 56, 0, 0, 0, 0, 0, 0, 252, 192, 197, 15, 192, 120, 248, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 192, 15, 152, 96, 0, 8, 15, 255, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 3, 0, 0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 128, 49, 48, 0, 0, 0, 252, 191, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 192, 7, 0, 0, 0, 0, 0, 0, 0, 224, 12, 24, 0, 0, 0, 254, 255, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 1, 0, 0, 0, 0, 128, 31, 0, 0, 0, 0, 0, 0, 0, 0, 103, 192, 0, 0, 0, 224, 227, 31, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 128, 239, 0, 0, 0, 0, 0, 0, 0, 0, 126, 128, 0, 0, 0, 0, 1, 15, 255, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 1, 0, 0, 0, 0, 0, 248, 63, 0, 0, 0, 0, 0, 0, 0, 192, 15, 0, 0, 0, 0, 0, 224, 195, 255, 225, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 0, 0, 0, 192, 63, 0, 0, 0, 0, 0, 0, 0, 0, 63, 0, 0, 0, 0, 0, 0, 15, 159, 143, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 128, 15, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 16, 192, 135, 223, 143, 255, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 0, 0, 0, 0, 128, 1, 120, 248, 255, 224, 121, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
Servo myServo;


long int stepsTurntable=0;
double restTurntable=0;
long int stepsLinear=0;
double restLinear=0;
int index=0;
double rOld=0;
double tOld=0;
float relation= (45.0/7.0)*3200.0;



//placeholder
int draw=20;
int up=85;
int motLinear=11;
int motTurntable=6;
double pi=3.14159265359;


void setup() {
Serial.begin(9600);


myServo.attach(9); // attaches the servo on pin 9 to the servo object
myServo.write(up);
pinMode(2,OUTPUT);
pinMode(3,OUTPUT);
pinMode(4,OUTPUT);
pinMode(5,OUTPUT);
pinMode(6,OUTPUT);
digitalWrite(2,HIGH);
digitalWrite(3,HIGH);
digitalWrite(4,HIGH);
digitalWrite(5,LOW);
digitalWrite(6,LOW);
pinMode(7,OUTPUT);
pinMode(8,OUTPUT);
pinMode(12,OUTPUT);
pinMode(10,OUTPUT);
pinMode(11,OUTPUT);
digitalWrite(7,HIGH);
digitalWrite(8,HIGH);
digitalWrite(12,LOW);
digitalWrite(10,LOW);
digitalWrite(11,LOW);
}





int getPixel(){
char tmp=pgm_read_byte_near(arr+((int)index/8));

return ((tmp >> index%8) & 0x01);
}

void calculate_next_pixel(){
double t=4.0*sqrt((double)index);
double angleTurntable=t-tOld;
double r=0.5*t;
double distanceLinear=r-rOld;

stepsLinear=(distanceLinear*800)+restLinear;
restLinear=((distanceLinear*800.0)+restLinear)-(int)((distanceLinear*800.0)+restLinear);

 stepsTurntable=((angleTurntable/(2*pi))*relation)+restTurntable;
restTurntable=(((angleTurntable/(2*pi))*relation)+restTurntable)-(int)(((angleTurntable/(2*pi))*relation)+restTurntable);
rOld=r;
tOld=t;

}

void drawPixel(){


//myServo.write(up);
}

void drive(){


while(stepsLinear>0 || stepsTurntable>0 ){
if(stepsLinear>0){
digitalWrite(motLinear, HIGH);
stepsLinear--;
}
if(stepsTurntable>0){
digitalWrite(motTurntable, HIGH);
stepsTurntable--;
}

delay(1);
digitalWrite(motLinear, LOW);
digitalWrite(motTurntable, LOW);
delay(1);

}

}


void loop() {
  int s=0;
calculate_next_pixel();
Serial.print (stepsTurntable);
Serial.println (stepsLinear);

drive();
//myServo.write(draw);
//drawPixel();
//getPixel();
if(getPixel()>0){
myServo.write(draw);
delay(150);
myServo.write(up);

}
//delay(1000);
index++;

//myServo.write(up);
if (index>8*sizeof(arr)){
  s=1;
}
while(s==1){
  
}

}




// 1mm linear== 800steps
// 2 pi==3000*45/7 steps == 1 rotation







 
 



